//
//  DataStore.swift
//  SwiftSecrets
//
//  Created by Yuri Volegov on 12.04.2023.
//

import Foundation

final class DataStore {
    static var share = DataStore()
    private init() {}
}

extension DataStore {
    func getSecrets() -> [Secret] {
        [
            Secret(
                title: "Delegate",
                image: [""],
                matherials: [""],
                questions: [
                    Question(
                        title: "",
                        answers: [""],
                        best: 0
                    ),
                    Question(
                        title: "",
                        answers: [""],
                        best: 0
                    ),
                    Question(
                        title: "",
                        answers: [""],
                        best: 0
                    )
                ]
            ),
            Secret(
                title: "CoreData",
                image: ["CoreData"],
                matherials: [
    """
    Для создания хранилища в приложении используются классы NSPersistentStoreCoordinator или NSPersistentContainer. NSPersistentStoreCoordinator создает хранилище указанного типа на основе модели, можно указать размещение и дополнительные опции. NSPersistentContainer можно использовать с IOS10, дает возможность создания с минимальным количеством кода.

    Работает это следующим образом: если по указанному пути существует база данных, то координатор проверяет ее версию и, при необходимости, делает миграцию. Если база не существует, то она создается на основании модели NSManagedObjectModel. Чтобы все это работало правильно, перед внесением изменений в модель создавайте новую версию в Xcode через меню Editor -> Add Model Version. Если вывести путь, то можно найти и открыть базу в эмуляторе.
    
    Core Data использует 4 типа хранилища:

    — SQLite
    — Binary
    — In-Memory
    — XML (только для Mac OS)

    Если, например, по соображениям безопасности Вы не хотите хранить данные в файловом виде, но при этом хотите использовать кеширование в течении сессии и данные в виде объектов, вполне подойдет хранилище типа «In-Memory». Собственно, не запрещается иметь в одном приложении несколько хранилищ разного типа.

    Несколько слов хочется сказать об объекте NSManagedObjectContext. Вообще, Apple дает весьма туманную формулировку для NSManagedObjectContext — среда для работы с объектами Core Data. Все это от желания отмежеваться от ассоциаций с реляционными базами, и представить Core Data, как простое в использовании средство, не требующее понимания ключей, транзакций и прочей базданской атрибутики. Но на языке реляционных баз NSManagedObjectContext можно, в некотором смысле, назвать менеджером транзакций. Вы, наверное, заметили, что он имеет методы save и rollback, хотя скорее всего вы пользуетесь только первым.

    Недопонимание этого простого факта, приводит к использованию одноконтекстной модели, даже в тех ситуациях, где ее недостаточно. К примеру, вы редактируете большой документ, и при этом вам потребовалось загрузить пару справочников. В какой момент вызывать save? Если бы мы работали с реляционной базой, то тут бы не возникло вопросов, поскольку каждая операция выполнялась бы в своей транзакции. В Core Data тоже есть вполне удобный способ для решения этой проблемы — это ответвление дочернего контекста. Но к сожалению, это почему-то используется редко.
    """
                ],
                questions: [
                    Question(
                        title: "Какой класс нужно использовать для создания хранилища указанного типа на основе модели?",
                        answers: ["NSPersistentStoreCoordinator", "NSManagedObjectContext", "NSManagedObjectModel", "NSPersistentContainer"],
                        best: 0
                    ),
                    Question(
                        title: "Какой тип хранилища не использует CoreData?",
                        answers: ["SQLite", "Binary", "In-Memory", "SQL"],
                        best: 3
                    ),
                    Question(
                        title: "Хранилище какого типа подойдет для кеширования во время сессии данных ввиде объектов?",
                        answers: ["SQLite", "Binary", "In-Memory", "XML"],
                        best: 2
                    )
                ]
            )
            
        ]
        
    }
}
